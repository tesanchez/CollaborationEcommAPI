<?xml version="1.0" encoding="UTF-8"?>
<con:interface xsi:type="con:RestService" id="f619f266-75c9-40c7-98d4-8cc4bb051c07" name="API(A)" type="rest_ex" wadlVersion="https://swagger.io/swagger2/specification" definitionUrl="C:\StarWest2020\Temil-swapi-1.0.0-resolved.json" basePath="api" xmlns:con="http://eviware.com/soapui/config" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <con:description>Welcome to the swapi, the Star Wars API! This documentation should help you familiarise yourself with the resources available and how to consume them with HTTP requests. If you're after a native helper library then I suggest you scroll down and check out what's available. Read through the getting started section before you dive in. Most of your problems should be solved just by reading through it.</con:description>
  <con:settings>
    <con:setting id="f619f266-75c9-40c7-98d4-8cc4bb051c07fileName">API%28A%29</con:setting>
  </con:settings>
  <con:definitionCache type="TEXT" rootPart="file:/C:/StarWest2020/Temil-swapi-1.0.0-resolved.json">
    <con:part>
      <con:url>file:/C:/StarWest2020/Temil-swapi-1.0.0-resolved.json</con:url>
      <con:content>{
  "swagger": "2.0",
  "info": {
    "description": "Welcome to the swapi, the Star Wars API! This documentation should help you familiarise yourself with the resources available and how to consume them with HTTP requests. If you're after a native helper library then I suggest you scroll down and check out what's available. Read through the getting started section before you dive in. Most of your problems should be solved just by reading through it.\n",
    "version": "1.0.0",
    "title": "SWAPI"
  },
  "host": "https://swapi.co",
  "basePath": "/api",
  "tags": [
    {
      "name": "people",
      "description": "A People resource is an individual person or character within the Star Wars universe.",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "films",
      "description": "A Film resource is a single film."
    },
    {
      "name": "starships",
      "description": "A Starship resource is a single transport craft that has hyperdrive capability."
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/people": {
      "get": {
        "tags": [
          "people"
        ],
        "summary": "Get all the people resources",
        "operationId": "showPeople",
        "produces": [
          "application/json"
        ]
      }
    },
    "/people/{peopleId}": {
      "get": {
        "tags": [
          "people"
        ],
        "summary": "Get a specific people resource",
        "description": "Returns a single people",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "peopleId",
            "in": "path",
            "description": "ID of person to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/People"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "person not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/films": {
      "get": {
        "tags": [
          "films"
        ],
        "summary": "Get all the film resources",
        "operationId": "showFilms",
        "produces": [
          "application/json"
        ],
        "parameters": []
      }
    },
    "/films/{filmId}": {
      "get": {
        "tags": [
          "films"
        ],
        "summary": "get a specific film resource",
        "description": "Returns a specific film",
        "operationId": "getFilmById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "filmId",
            "in": "path",
            "description": "ID of film that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Films"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/starships": {
      "post": {
        "tags": [
          "starships"
        ],
        "summary": "Shows all the starships",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/starships/{starshipId}": {
      "get": {
        "tags": [
          "starships"
        ],
        "summary": "Get starship by its id",
        "operationId": "getUserById",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "starshipId",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "petstore_auth": {
      "type": "oauth2",
      "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
      "flow": "implicit",
      "scopes": {
        "write:pets": "modify pets in your account",
        "read:pets": "read your pets"
      }
    },
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "definitions": {
    "People": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "birth_year": {
          "type": "string"
        },
        "eye_color": {
          "type": "string"
        },
        "gender": {
          "type": "string"
        },
        "hair_color": {
          "type": "string"
        },
        "height": {
          "type": "string"
        },
        "mass": {
          "type": "string"
        },
        "films": {
          "type": "array",
          "items": {}
        },
        "starships": {
          "type": "array",
          "items": {}
        }
      }
    },
    "Films": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "episode_id": {
          "type": "string"
        },
        "opening_crawl": {
          "type": "string"
        },
        "director": {
          "type": "string"
        },
        "producer": {
          "type": "string"
        },
        "starships": {
          "type": "array",
          "description": "An array of starship resource URLs that are in this film.",
          "items": {}
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}</con:content>
      <con:type>https://swagger.io/swagger2/specification</con:type>
    </con:part>
  </con:definitionCache>
  <con:endpoints>
    <con:endpoint>http://https://swapi.co</con:endpoint>
    <con:endpoint>https://https://swapi.co</con:endpoint>
  </con:endpoints>
  <con:environmentSpec>
    <con:entry environmentId="f06a92da-b61f-4a7d-a406-01c98b42c5a0">
      <con:authProfile>Inherit From Parent</con:authProfile>
    </con:entry>
  </con:environmentSpec>
</con:interface>
